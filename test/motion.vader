Before:
=======
  BracelessEnable +indent +fold +highlight

Given python (multi block script):
==================================
  def example():
      """Doc string
      """
      # There is a docstring above
      if True: pass

      if True \
              and True:
          print('so true')

          with something:
              print('something')

Execute (move to last block, then jump to first):
=================================================
  normal ]]
  AssertCursor 1, 14
  normal ]]
  AssertCursor 8, 21
  normal ]]
  AssertCursor 11, 23
  normal 3[[
  AssertCursor 1, 14

Do (delete body):
=================
  diP

Expect python (func sig without body):
======================================
  def example():

Do (change body):
=================
  ciPpass

Expect python (func sig with replaced body):
============================================
  def example():
      pass

Do (visually replace body):
=========================
  viPspass

Expect python (func sig with replaced body):
============================================
  def example():
      pass

Do (indent body):
=================
  >iP

Expect python (over indented body):
===================================
  def example():
          """Doc string
          """
          # There is a docstring above
          if True: pass

          if True \
                  and True:
              print('so true')

              with something:
                  print('something')


Do (unindent body):
===================
  <iP

Expect python (under indented body):
====================================
  def example():
  """Doc string
  """
  # There is a docstring above
  if True: pass

  if True \
          and True:
      print('so true')

      with something:
          print('something')


Do (delete function):
=====================
  daPix

Expect python (entire function deleted):
========================================
  x

Given python (docstring with under indented tail):
==================================================
  def example():
      test = """
  hi
  """
      print('hello')

Do (delete body):
=================
  diP

Expect python (func sig with empty body):
=========================================
  def example():


Do (select body and change):
============================
  viPcpass

Expect python (body replaced with pass):
========================================
  def example():
      pass

Do (select body and substitue):
  viPSpass

Expect python (body replaced with pass):
========================================
  def example():
      pass

Do (select body and delete):
============================
  viPd

Expect python (body deleted):
=============================
  def example():

Given python (block without body followed by blocks):
=====================================================
  def example():
  if True:
      pass
  else:
      pass

  def example():
      pass

Do (indent content below empty block):
======================================
  >iP

Expect python (content below first content indented):
=====================================================
  def example():
      if True:
          pass
      else:
          pass

  def example():
      pass


Given python (function without body followed by blocks):
========================================================
  def example():
  def example():
      if True:
          pass
  def example():
      pass

  def example():
      pass

Do (indent contingious content, unindent second inner function):
================================================================
  >iP3]]<aP

Expect python (third function returned to first column):
========================================================
  def example():
      def example():
          if True:
              pass
  def example():
      pass

  def example():
      pass

Given python (segmented block gauntlet):
========================================
  class Example(object):
      def __init__(self):
          print('hello')
          print('world!')

          if True:
              pass

          print('hello again')
          print('hello again')

      def never(self):
          if True:
              if True:
                  print('gonna')

                  print('give')
              else:
                  print('you')

      def up(self):
          if True:
              print('never')
              print('gonna')
          else:
              print('let')

      def you(self):
          if True:
              print('down')
              print('never')
          else:
              print('gonna')

      def run(self):
          if True:
              print('around')
              print('and')
          else:
              print('desert')

          print('you')

Execute (move by method and class):
===================================
  normal ]m
  AssertCursor 1, 7
  normal ]m
  AssertCursor 2, 9
  normal ]M
  AssertCursor 10, 28
  normal 2]M
  AssertCursor 26, 24
  normal [m
  AssertCursor 21, 9
  normal 3[m
  AssertCursor 1, 7
  normal 38G
  normal [m
  AssertCursor 35, 9
  normal 38G
  normal ]M
  AssertCursor 42, 20
  normal [M
  AssertCursor 33, 26

Execute (move by block segments):
=================================
  normal \j
  AssertCursor 3, 9
  normal \j
  AssertCursor 7, 13
  normal \j
  AssertCursor 9, 9
  normal \j
  AssertCursor 15, 17
  normal \j
  AssertCursor 19, 17
  normal 3\j
  AssertCursor 30, 13
  normal G$\k
  AssertCursor 40, 27
  normal \k
  AssertCursor 38, 24
  normal \k
  AssertCursor 33, 26
  normal 5\k
  AssertCursor 17, 29
  normal 99\j
  AssertCursor 42, 9
  normal 99\k
  AssertCursor 1, 22

Execute (move by inner block):
==============================
  normal \j
  normal ]\
  AssertCursor 4, 23
  normal ]\
  AssertCursor 4, 23
  normal [\
  AssertCursor 3, 9
  normal [\
  AssertCursor 3, 9
  normal 1]\
  AssertCursor 7, 16
  normal [\
  AssertCursor 7, 13
  normal 2]\
  AssertCursor 17, 29
  normal 99]\
  AssertCursor 42, 20
  normal 99[\
  AssertCursor 1, 1
